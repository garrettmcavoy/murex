{
  "version": 3,
  "sources": ["../../threejs-object-controls/ObjectControls.js"],
  "sourcesContent": ["/* --------------------------------------------------------\nObjectControls\nversion: 1.2.8\nauthor: Alberto Piras\nemail: a.piras.ict@gmail.com\ngithub: https://github.com/albertopiras\nlicense: MIT\ndescription: module for ThreeJS that allows you to rotate an Object(mesh) independently from the rest of the scene, and to zoom in/out moving the camera; for desktop and mobile.\n----------------------------------------------------------*/\n\n/**\n * ObjectControls\n * @constructor\n * @param camera - reference to the camera.\n * @param domElement - reference to the renderer's dom element.\n * @param objectToMove - reference the object to control.\n */\nfunction ObjectControls(camera, domElement, objectToMove) {\n  /**\n   * setObjectToMove\n   * @description changes the object(s) to control\n   * @param newMesh : one mesh or an array of meshes\n   **/\n  this.setObjectToMove = function (newMesh) {\n    mesh = newMesh;\n  };\n\n  this.getObjectToMove = function() {\n    return mesh;\n  }\n\n  /**\n   * setZoomSpeed\n   * @description sets a custom zoom speed (0.1 == slow  1 == fast)\n   * @param newZoomSpeed\n   **/\n  this.setZoomSpeed = function (newZoomSpeed) {\n    zoomSpeed = newZoomSpeed;\n  };\n\n  /**\n   * setDistance\n   * @description set the zoom range distance\n   * @param {number} min\n   * @param {number} max\n   **/\n  this.setDistance = function (min, max) {\n    minDistance = min;\n    maxDistance = max;\n  };\n\n  /**\n   * setRotationSpeed\n   * @param {number} newRotationSpeed - (1 == fast)  (0.01 == slow)\n   **/\n  this.setRotationSpeed = function (newRotationSpeed) {\n    rotationSpeed = newRotationSpeed;\n  };\n\n  /**\n   * setRotationSpeedTouchDevices\n   * @param {number} newRotationSpeed - (1 == fast)  (0.01 == slow)\n   **/\n  this.setRotationSpeedTouchDevices = function (newRotationSpeed) {\n    rotationSpeedTouchDevices = newRotationSpeed;\n  };\n\n  this.enableVerticalRotation = function () {\n    verticalRotationEnabled = true;\n  };\n\n  this.disableVerticalRotation = function () {\n    verticalRotationEnabled = false;\n  };\n\n  this.enableHorizontalRotation = function () {\n    horizontalRotationEnabled = true;\n  };\n\n  this.disableHorizontalRotation = function () {\n    horizontalRotationEnabled = false;\n  };\n\n  this.setMaxVerticalRotationAngle = function (min, max) {\n    MAX_ROTATON_ANGLES.x.from = min;\n    MAX_ROTATON_ANGLES.x.to = max;\n    MAX_ROTATON_ANGLES.x.enabled = true;\n  };\n\n  this.setMaxHorizontalRotationAngle = function (min, max) {\n    MAX_ROTATON_ANGLES.y.from = min;\n    MAX_ROTATON_ANGLES.y.to = max;\n    MAX_ROTATON_ANGLES.y.enabled = true;\n  };\n\n  this.disableMaxHorizontalAngleRotation = function () {\n    MAX_ROTATON_ANGLES.y.enabled = false;\n  };\n\n  this.disableMaxVerticalAngleRotation = function () {\n    MAX_ROTATON_ANGLES.x.enabled = false;\n  };\n\n  this.disableZoom = function () {\n    zoomEnabled = false;\n  };\n\n  this.enableZoom = function () {\n    zoomEnabled = true;\n  };\n\n  this.isUserInteractionActive = function(){\n    return isDragging;\n  }\n\n  domElement = domElement !== undefined ? domElement : document;\n\n  /********************* Private control variables *************************/\n\n  const MAX_ROTATON_ANGLES = {\n    x: {\n      // Vertical from bottom to top.\n      enabled: false,\n      from: Math.PI / 8,\n      to: Math.PI / 8,\n    },\n    y: {\n      // Horizontal from left to right.\n      enabled: false,\n      from: Math.PI / 4,\n      to: Math.PI / 4,\n    },\n  };\n\n  let flag,\n    mesh = objectToMove,\n    maxDistance = 15,\n    minDistance = 6,\n    zoomSpeed = 0.5,\n    rotationSpeed = 0.05,\n    rotationSpeedTouchDevices = 0.05,\n    isDragging = false,\n    verticalRotationEnabled = false,\n    horizontalRotationEnabled = true,\n    zoomEnabled = true,\n    mouseFlags = { MOUSEDOWN: 0, MOUSEMOVE: 1 },\n    previousMousePosition = { x: 0, y: 0 },\n    prevZoomDiff = { X: null, Y: null },\n    /**\n     * CurrentTouches\n     * length 0 : no zoom\n     * length 2 : is zoomming\n     */\n    currentTouches = [];\n\n  /***************************** Private shared functions **********************/\n\n  function zoomIn() {\n    camera.position.z -= zoomSpeed;\n  }\n\n  function zoomOut() {\n    camera.position.z += zoomSpeed;\n  }\n\n  function rotateVertical(deltaMove, mesh) {\n    if (mesh.length > 1) {\n      for (let i = 0; i < mesh.length; i++) {\n        rotateVertical(deltaMove, mesh[i]);\n      }\n      return;\n    }\n    mesh.rotation.x += Math.sign(deltaMove.y) * rotationSpeed;\n  }\n\n  function rotateVerticalTouch(deltaMove, mesh) {\n    if (mesh.length > 1) {\n      for (let i = 0; i < mesh.length; i++) {\n        rotateVerticalTouch(deltaMove, mesh[i]);\n      }\n      return;\n    }\n    mesh.rotation.x += Math.sign(deltaMove.y) * rotationSpeedTouchDevices;\n  }\n\n  function rotateHorizontal(deltaMove, mesh) {\n    if (mesh.length > 1) {\n      for (let i = 0; i < mesh.length; i++) {\n        rotateHorizontal(deltaMove, mesh[i]);\n      }\n      return;\n    }\n    mesh.rotation.y += Math.sign(deltaMove.x) * rotationSpeed;\n  }\n\n  function rotateHorizontalTouch(deltaMove, mesh) {\n    if (mesh.length > 1) {\n      for (let i = 0; i < mesh.length; i++) {\n        rotateHorizontalTouch(deltaMove, mesh[i]);\n      }\n      return;\n    }\n    mesh.rotation.y += Math.sign(deltaMove.x) * rotationSpeedTouchDevices;\n  }\n\n  /**\n   * isWithinMaxAngle\n   * @description Checks if the rotation in a specific axe is within the maximum\n   * values allowed.\n   * @param delta is the difference of the current rotation angle and the\n   *     expected rotation angle\n   * @param axe is the axe of rotation: x(vertical rotation), y (horizontal\n   *     rotation)\n   * @return true if the rotation with the new delta is included into the\n   *     allowed angle range, false otherwise\n   */\n  function isWithinMaxAngle(delta, axe) {\n    if (MAX_ROTATON_ANGLES[axe].enabled) {\n      if (mesh.length > 1) {\n        let condition = true;\n        for (let i = 0; i < mesh.length; i++) {\n          if (!condition) return false;\n          if (MAX_ROTATON_ANGLES[axe].enabled) {\n            condition = isRotationWithinMaxAngles(mesh[i], delta, axe);\n          }\n        }\n        return condition;\n      }\n      return isRotationWithinMaxAngles(mesh, delta, axe);\n    }\n    return true;\n  }\n\n  function isRotationWithinMaxAngles(meshToRotate, delta, axe) {\n    return MAX_ROTATON_ANGLES[axe].from * -1 <\n      meshToRotate.rotation[axe] + delta &&\n      meshToRotate.rotation[axe] + delta < MAX_ROTATON_ANGLES[axe].to\n      ? true\n      : false;\n  }\n\n  function resetMousePosition() {\n    previousMousePosition = { x: 0, y: 0 };\n  }\n\n  /******************  MOUSE interaction functions - desktop  *****/\n  function mouseDown(e) {\n    isDragging = true;\n    flag = mouseFlags.MOUSEDOWN;\n  }\n\n  function mouseMove(e) {\n    if (isDragging) {\n      const deltaMove = {\n        x: e.offsetX - previousMousePosition.x,\n        y: e.offsetY - previousMousePosition.y,\n      };\n\n      previousMousePosition = { x: e.offsetX, y: e.offsetY };\n\n      if (horizontalRotationEnabled && deltaMove.x != 0) {\n        // && (Math.abs(deltaMove.x) > Math.abs(deltaMove.y))) {\n        // enabling this, the mesh will rotate only in one specific direction\n        // for mouse movement\n        if (!isWithinMaxAngle(Math.sign(deltaMove.x) * rotationSpeed, \"y\"))\n          return;\n        rotateHorizontal(deltaMove, mesh);\n        flag = mouseFlags.MOUSEMOVE;\n      }\n\n      if (verticalRotationEnabled && deltaMove.y != 0) {\n        // &&(Math.abs(deltaMove.y) > Math.abs(deltaMove.x)) //\n        // enabling this, the mesh will rotate only in one specific direction for\n        // mouse movement\n        if (!isWithinMaxAngle(Math.sign(deltaMove.y) * rotationSpeed, \"x\"))\n          return;\n        rotateVertical(deltaMove, mesh);\n        flag = mouseFlags.MOUSEMOVE;\n      }\n    }\n  }\n\n  function mouseUp() {\n    isDragging = false;\n    resetMousePosition();\n  }\n\n  function wheel(e) {\n    if (!zoomEnabled) return;\n    const delta = e.wheelDelta ? e.wheelDelta : e.deltaY * -1;\n    if (delta > 0 && camera.position.z > minDistance) {\n      zoomIn();\n    } else if (delta < 0 && camera.position.z < maxDistance) {\n      zoomOut();\n    }\n  }\n  /****************** TOUCH interaction functions - mobile  *****/\n\n  function onTouchStart(e) {\n    e.preventDefault();\n    flag = mouseFlags.MOUSEDOWN;\n    if (e.touches.length === 2) {\n      prevZoomDiff.X = Math.abs(e.touches[0].clientX - e.touches[1].clientX);\n      prevZoomDiff.Y = Math.abs(e.touches[0].clientY - e.touches[1].clientY);\n      currentTouches = new Array(2);\n    } else {\n      previousMousePosition = { x: e.touches[0].pageX, y: e.touches[0].pageY };\n    }\n  }\n\n  function onTouchEnd(e) {\n    prevZoomDiff.X = null;\n    prevZoomDiff.Y = null;\n\n    /* If you were zooming out, currentTouches is updated for each finger you\n     * leave up the screen so each time a finger leaves up the screen,\n     * currentTouches length is decreased of a unit. When you leave up both 2\n     * fingers, currentTouches.length is 0, this means the zoomming phase is\n     * ended.\n     */\n    if (currentTouches.length > 0) {\n      currentTouches.pop();\n    } else {\n      currentTouches = [];\n    }\n    e.preventDefault();\n    if (flag === mouseFlags.MOUSEDOWN) {\n      // TouchClick\n      // You can invoke more other functions for animations and so on...\n    } else if (flag === mouseFlags.MOUSEMOVE) {\n      // Touch drag\n      // You can invoke more other functions for animations and so on...\n    }\n    resetMousePosition();\n  }\n\n  function onTouchMove(e) {\n    e.preventDefault();\n    flag = mouseFlags.MOUSEMOVE;\n    // Touch zoom.\n    // If two pointers are down, check for pinch gestures.\n    if (e.touches.length === 2 && zoomEnabled) {\n      currentTouches = new Array(2);\n      // Calculate the distance between the two pointers.\n      const curDiffX = Math.abs(e.touches[0].clientX - e.touches[1].clientX);\n      const curDiffY = Math.abs(e.touches[0].clientY - e.touches[1].clientY);\n\n      if (prevZoomDiff && prevZoomDiff.X > 0 && prevZoomDiff.Y > 0) {\n        if (\n          curDiffX > prevZoomDiff.X &&\n          curDiffY > prevZoomDiff.Y &&\n          camera.position.z > minDistance\n        ) {\n          zoomIn();\n        } else if (\n          curDiffX < prevZoomDiff.X &&\n          camera.position.z < maxDistance &&\n          curDiffY < prevZoomDiff.Y\n        ) {\n          zoomOut();\n        }\n      }\n      // Cache the distance for the next move event.\n      prevZoomDiff.X = curDiffX;\n      prevZoomDiff.Y = curDiffY;\n\n      // Touch Rotate.\n    } else if (currentTouches.length === 0) {\n      prevZoomDiff.X = null;\n      prevZoomDiff.Y = null;\n      const deltaMove = {\n        x: e.touches[0].pageX - previousMousePosition.x,\n        y: e.touches[0].pageY - previousMousePosition.y,\n      };\n      previousMousePosition = { x: e.touches[0].pageX, y: e.touches[0].pageY };\n\n      if (horizontalRotationEnabled && deltaMove.x != 0) {\n        if (\n          !isWithinMaxAngle(\n            Math.sign(deltaMove.x) * rotationSpeedTouchDevices,\n            \"y\"\n          )\n        )\n          return;\n        rotateHorizontalTouch(deltaMove, mesh);\n      }\n\n      if (verticalRotationEnabled && deltaMove.y != 0) {\n        if (\n          !isWithinMaxAngle(\n            Math.sign(deltaMove.y) * rotationSpeedTouchDevices,\n            \"x\"\n          )\n        )\n          return;\n        rotateVerticalTouch(deltaMove, mesh);\n      }\n    }\n  }\n\n  /********************* Event Listeners *************************/\n\n  /** Mouse Interaction Controls (rotate & zoom, desktop **/\n  // Mouse - move\n  domElement.addEventListener(\"mousedown\", mouseDown, false);\n  domElement.addEventListener(\"mousemove\", mouseMove, false);\n  domElement.addEventListener(\"mouseup\", mouseUp, false);\n  domElement.addEventListener(\"mouseout\", mouseUp, false);\n\n  // Mouse - zoom\n  domElement.addEventListener(\"wheel\", wheel, false);\n\n  /** Touch Interaction Controls (rotate & zoom, mobile) **/\n  // Touch - move\n  domElement.addEventListener(\"touchstart\", onTouchStart, false);\n  domElement.addEventListener(\"touchmove\", onTouchMove, false);\n  domElement.addEventListener(\"touchend\", onTouchEnd, false);\n}\n\nexport { ObjectControls };\n"],
  "mappings": "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",
  "names": ["mesh"]
}
